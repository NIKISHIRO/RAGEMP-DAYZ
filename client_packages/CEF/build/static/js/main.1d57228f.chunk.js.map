{"version":3,"sources":["serviceWorker.ts","types.ts","actions/inventoryActions.ts","reducers/UIReducer.ts","reducers/clothesReducer.ts","actions/clothesActions.ts","helpers/emitter.ts","store/config.ts","reducers/index.ts","helpers/playerEvents/index.ts","helpers/getImages.ts","components/UserInterface/Inventory/InventoryCell/index.tsx","components/UserInterface/Inventory/SelectedItem/TabSplitComponent/index.tsx","components/UserInterface/Inventory/SelectedItem/index.tsx","components/UserInterface/Inventory/InventoryCells/index.tsx","components/UserInterface/Inventory/index.tsx","components/UserInterface/ItemsGround/ItemsGroundCells/index.tsx","components/UserInterface/ItemsGround/index.tsx","helpers/playerEvents/rpcCall.ts","components/UserInterface/index.tsx","components/App/index.tsx","components/Root/index.tsx","index.tsx","helpers/playerEvents/rpcRegister.ts","helpers/playerEvents/events/eventSetGroundItems.ts","assets/items/item_weapon_ak47.png","assets/items/item_armor.png","assets/items/item_ammo_shotgun.png"],"names":["Boolean","window","location","hostname","match","ItemType","ItemKey","setInventoryItems","items","dispatch","getState","type","payload","splitInventoryItemByIndex","itemId","splitCount","Number","isInteger","UI","inventory","invItems","findItem","JSON","parse","stringify","newItem","item","amount","data","shortid","generate","splice","unshift","setGroundItems","initialState","snackbar","open","text","origin","vertical","horizontal","slots","ground","key","ITEM_WEAPON_AK47","WEAPON","name","description","maxStackCount","weight","ITEM_AMMO_SHOTGUN","AMMO","ITEM_ARMOR","ARMOR","UIReducer","state","action","isShow","ClothesReducer","emitter","EventEmitter","history","createMemoryHistory","initialEntries","pathname","initialIndex","store","createStore","combineReducers","clothes","router","connectRouter","compose","applyMiddleware","routerMiddleware","thunk","logger","on","push","setInventorySlots","images","img_item_weapon_ak47","img_item_armor","img_item_ammo_shotgun","InventoryCellConnect","connect","UIState","stackItems","currentItemIndex","nextItemIndex","currentItem","nextItem","sum","console","log","props","itemKey","id","isInventory","onSelectItem","itemImage","isStack","currentItemIdx","findIndex","i","onMouseDown","event","button","idx","Math","floor","draggableId","index","dragProvided","snapshot","onClick","e","ref","innerRef","className","draggableProps","dragHandleProps","src","draggable","stopPropagation","onStackClick","TabComponentConnect","maxSplit","useState","inputValue","setInputValue","checkRangeValue","value","isNaN","Slider","defaultValue","valueLabelDisplay","step","ceil","min","max","onChange","disabled","marks","parseInt","target","onPopClose","IconButton","color","aria-label","component","classes","root","SelectedItem","anchorEl","useToggle","toggle","Tab1","Tab2","Tab3","Popover","paper","onClose","anchorOrigin","transformOrigin","InventoryCellsConnect","setCurrentItem","setAnchorEl","currentTarget","droppableId","provided","style","isDraggingOver","overflow","height","droppableProps","map","placeholder","Inventory","ItemsGroundCellsConnect","ItemsGround","takeInventoryItemToServer","a","rpc","callServer","dropInventoryItemToServer","move","source","destination","droppableSource","droppableDestination","sourceClone","Array","from","destClone","removed","result","reorder","list","startIndex","endIndex","UserInterfaceConnect","setSnackbar","snack","hasOwnProperty","id2List","droppable","droppable1","getList","onDragEnd","inventoryItems","groundItems","serverResult","Snackbar","message","autoHideDuration","RoutesComp","position","top","left","href","emit","Home","App","exact","path","UserInterface","Root","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","register","eventSetInventorySlots","module","exports"],"mappings":"2NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICRMC,EAOAC,E,wDCwENC,EAAoB,SAACC,GACvB,OAAO,SAACC,EAAUC,GACdD,EAAS,CACLE,KAxFuB,sBAyFvBC,QAAQ,YAAKJ,OAKnBK,EAA4B,SAACC,EAAgBC,GAC/C,OAAO,SAACN,EAAUC,GACd,GAAKM,OAAOC,UAAUF,MAIlBA,GAAc,GAAlB,CAL2B,IAWnBP,EAFOE,IAAPQ,GACAC,UACAX,MACFY,EAAQ,YAAOZ,GACfa,EAAWC,KAAKC,MAAMD,KAAKE,UAAUJ,EAASN,KAC9CW,EAAUH,KAAKC,MAAMD,KAAKE,UAAUH,IACpCK,EAAON,EAASN,GAEtB,KAAIY,EAAKC,QAAUZ,GAAnB,CAIA,IAAMY,EAASD,EAAKC,OAASZ,EAC7BM,EAASM,OAASA,EAClBF,EAAQG,KAAKC,QAAb,mBAAmCA,IAAQC,YAC3CL,EAAQE,OAASZ,EAEjBK,EAASW,OAAOjB,EAAQ,GACxBM,EAASY,QAAQX,EAAUI,GAE3BhB,EAASF,EAAkBa,QAI7Ba,EAAiB,SAACzB,GACpB,OAAO,SAACC,EAAUC,GACdD,EAAS,CACLE,KAlIoB,qBAmIpBC,QAAQ,YAAKJ,Q,SD9HbH,K,gBAAAA,E,cAAAA,E,oBAAAA,E,aAAAA,M,cAOAC,K,oCAAAA,E,wBAAAA,E,uCAAAA,M,KEGZ,IAsDM4B,EAAwB,CAC1BC,SAAU,CACNC,MAAM,EACNC,KAAM,GACNC,OAAQ,CACJC,SAAU,SACVC,WAAY,WAGpBrB,UAAW,CACPsB,MAAO,GACPjC,MAAO,IAEXkC,OAAQ,CACJlC,MApEsB,CAC1B,CACImC,IAAKrC,EAAQsC,iBACbjB,OAAQ,EACRC,KAAM,CACFjB,KAAMN,EAASwC,OACfC,KAAM,SACNC,YAAa,uCACbC,cAAe,EACfnB,QAASA,IAAQC,WACjBmB,OAAQ,IAIhB,CACIN,IAAKrC,EAAQ4C,kBACbvB,OAAQ,GACRC,KAAM,CACFjB,KAAMN,EAAS8C,KACfL,KAAM,gBACNC,YAAa,qEACbC,cAAe,GACfnB,QAASA,IAAQC,WACjBmB,OAAQ,KAIhB,CACIN,IAAKrC,EAAQ8C,WACbzB,OAAQ,EACRC,KAAM,CACFjB,KAAMN,EAASgD,MACfP,KAAM,QACNC,YAAa,6CACbC,cAAe,EACfnB,QAASA,IAAQC,WACjBmB,OAAQ,IAIhB,CACIN,IAAKrC,EAAQsC,iBACbjB,OAAQ,EACRC,KAAM,CACFjB,KAAMN,EAASwC,OACfC,KAAM,SACNC,YAAa,uCACbC,cAAe,EACfnB,QAASA,IAAQC,WACjBmB,OAAQ,OAuBpB,SAASK,IAA8C,IAApCC,EAAmC,uDAA3BrB,EAAcsB,EAAa,uCAClD,OAAQA,EAAO7C,MACX,IDvFoB,eCwFhB,OAAO,eAAK4C,EAAZ,CAAmBpB,SAAS,eAAKqB,EAAO5C,WAE5C,ID7F2B,sBC+FvB,OADA2C,EAAMpC,UAAUX,MAAQgD,EAAO5C,QACxB,eAAK2C,GAEhB,ID/F2B,sBCiGvB,OADAA,EAAMpC,UAAUsB,MAAQe,EAAO5C,QACxB,eAAK2C,GAEhB,IDpGwB,qBCqGpB,OAAO,eAAKA,EAAZ,CAAmBb,OAAQ,CAAElC,MAAOgD,EAAO5C,WAE/C,QACI,OAAO2C,GCvGnB,IAAMrB,EAA6B,CAC/BuB,QAAQ,GAGZ,SAASC,IAAiE,IAAlDH,EAAiD,uDAA3BrB,EAAcsB,EAAa,uCACrE,OAAQA,EAAO7C,MACX,ICZgB,UDaZ,OAAO,eAAK4C,EAAZ,CAAmBE,OAAQD,EAAO5C,UAEtC,QACI,OAAO,eAAK2C,I,6DEdlBI,EAAe,I,OAAIC,GCMzB,ICE2BC,ECLLpD,EFGhBoD,EAAUC,YAAoB,CAChCC,eAAgB,CAAE,OAAQ,OAAQ,CAAEC,SAAU,WAC9CC,aAAc,IAGZC,EAAQC,aCHaN,EDILA,ECJiBO,YAAgB,CACnDlD,GAAIoC,EACJe,QAASX,EACTY,OAAQC,YAAcV,MDEtBW,YACIC,YACIC,YAAiBb,GACjBc,IACAC,OEdUnE,EFmBTyD,EAAMzD,SAAUyD,EAAMxD,SElB/BiD,EAAQkB,GAAG,YAAY,WACnBpE,EAASqE,YAAK,SAGlBnB,EAAQkB,GAAG,UAAU,WACjBpE,EAASqE,YAAK,WAGlBnB,EAAQkB,GAAG,uBAAuB,SAACrE,GAC/BC,EAASwB,EAAezB,OAG5BmD,EAAQkB,GAAG,0BAA0B,SAACpC,GAClChC,EP6DkB,SAACgC,GACvB,OAAO,SAAChC,EAAUC,GACdD,EAAS,CACLE,KA7EuB,sBA8EvBC,QAAS6B,KOjEJsC,CAAkBtC,O,oICd7BuC,GAAM,mBACP1E,EAAQsC,iBAAmBqC,KADpB,cAEP3E,EAAQ8C,WAAa8B,KAFd,cAGP5E,EAAQ4C,kBAAoBiC,KAHrB,G,QCwHNC,EAAuBC,aAJL,SAAC9B,GAAD,MAAmB,CACvC+B,QAAS/B,EAAMrC,OAPQ,SAACT,GAAD,MAAe,CACtCF,kBAAmB,SAACC,GAAD,OAAmBC,EAASF,EAAkBC,KACjEK,0BAA2B,SAACC,EAAgBC,GAAjB,OAAwCN,EAASI,EAA0BC,EAAQC,KAC9GwE,WAAY,SAACC,EAA0BC,GAA3B,OAAqDhF,ETnFlD,SAAC+E,EAA0BC,GAC1C,OAAO,SAAChF,EAAUC,GAAc,IAGpBF,EAFOE,IAAPQ,GACAC,UACAX,MACFY,EAAQ,YAAOZ,GAErB,IAA0B,IAAtBgF,IAA8C,IAAnBC,EAA/B,CAIA,IAAMC,EAAW,eAAOlF,EAAMgF,IACxBG,EAAQ,eAAOnF,EAAMiF,IAE3B,GAAIC,EAAY/C,MAAQgD,EAAShD,IAAjC,CAIA,IAAMK,EAAgB0C,EAAY9D,KAAKoB,cACjC4C,EAAMF,EAAY/D,OAASgE,EAAShE,OAK1C,GAHAkE,QAAQC,IAAI,gBAAiB9C,GAC7B6C,QAAQC,IAAI,MAAOF,GAEfA,EAAM5C,EAAe,CACrB,IAAMrB,EAASiE,EAAM5C,EACrB0C,EAAY/D,OAASA,EACrBgE,EAAShE,OAASqB,EAClB5B,EAASW,OAAOyD,EAAkB,EAAGE,GACrCtE,EAASW,OAAO0D,EAAe,EAAGE,QAElCA,EAAShE,OAASiE,EAClBxE,EAASW,OAAOyD,EAAkB,EAAGG,GACrCvE,EAASW,OAAO0D,EAAe,GAKnChF,EAAS,CACLE,KAtEuB,sBAuEvBC,QAASQ,OS2CyDmE,CAAWC,EAAkBC,QAO9EJ,EAhGP,SAACU,GAAkB,IDlBnBC,ECyBdN,EACAC,EAPIjE,EAA2GqE,EAA3GrE,KAAMuE,EAAqGF,EAArGE,GAAIX,EAAiGS,EAAjGT,QAA4BzE,GAAqEkF,EAAxFxF,kBAAwFwF,EAArElF,2BAA2BqF,EAA0CH,EAA1CG,YAAaC,EAA6BJ,EAA7BI,aAAcZ,EAAeQ,EAAfR,WAE5F/E,EADc8E,EAAdnE,UACAX,MACF4F,GDtBYJ,ECsBatE,EAAKiB,IDtBGqC,EAAOgB,ICwB1CK,GAAU,EAGd,GAAIH,EAAa,CACb,IAAMI,EAAiB9F,EAAM+F,WAAU,SAAAC,GAAC,OAAIA,IAAM9E,MAC1B,IAApB4E,IAEAZ,EAAclF,EAAM8F,GACpBX,EAAWnF,EAAM8F,EAAiB,GAE9BZ,GAAeC,GACXD,EAAY/C,MAAQgD,EAAShD,KAAO+C,EAAY9D,KAAKoB,cAAgB,IACrEqD,GAAU,IAM1B,IAAMI,EAAc,SAACC,GACjB,GAAKR,GAKgB,IAAjBQ,EAAMC,OAAc,CACpB,GAAIjF,EAAKC,QAAU,EACf,OAGJ,IAAMiF,EAAMpG,EAAM+F,WAAU,SAAAC,GAAC,OAAIA,IAAM9E,KAEvC,IAAa,IAATkF,EACA,OAGJ/F,EAA0B+F,EAAKC,KAAKC,MAAMpF,EAAKC,OAAS,MAWhE,OACI,kBAAC,IAAD,CAAWoF,YAAcrF,EAAKE,KAAKC,QAAUmF,MAAQf,IAChD,SAACgB,EAAcC,GACZ,OACI,yBACIC,QAAUhB,EAAe,SAACiB,GAAD,OAAOjB,EAAazE,EAAM0F,IAAK,kBAAM,GAC9DX,YAAcA,GAEd,yBAAKY,IAAMJ,EAAaK,UACpB,uCACIC,UAAU,mBACLN,EAAaO,eACbP,EAAaQ,iBAElB,yBAAKF,UAAU,wBACX,yBAAKG,IAAMtB,EAAYuB,WAAY,KAEvC,yBAAKJ,UAAU,uBACT7F,EAAKE,KAAKkB,MAEhB,yBAAKyE,UAAU,yBACT7F,EAAKC,QAGT0E,GAAW,yBAAKkB,UAAU,UAAUJ,QAAU,SAACC,GAAD,OA/BvD,SAACV,GAClBA,EAAMkB,kBACN,IAAMpC,EAAmBhF,EAAM+F,WAAU,SAAAC,GAAC,OAAIA,IAAMd,KAC9CD,EAAgBjF,EAAM+F,WAAU,SAAAC,GAAC,OAAIA,IAAMb,KACjDJ,EAAWC,EAAkBC,GA2BkDoC,CAAaT,KAAK,kBAAC,IAAD,gB,qCCDzG,IAQMU,GAAsBzC,aARJ,SAAC9B,GAAD,MAAmB,CACvC+B,QAAS/B,EAAMrC,OAGQ,SAACT,GAAD,MAAe,CACtCI,0BAA2B,SAACC,EAAgBC,GAAjB,OAAwCN,EAASI,EAA0BC,EAAQC,QAGtFsE,EA/F5B,SAA2BU,GAAe,IAC9BrE,EAA6CqE,EAA7CrE,KAAMb,EAAuCkF,EAAvClF,0BAENL,EAF6CuF,EAAZT,QACjCnE,UACAX,MACFmB,EAASD,EAAKC,OACdoG,EAAWpG,EAAS,EALW,EAODqG,mBAAcD,GAPb,mBAO9BE,EAP8B,KAOlBC,EAPkB,KAS/BC,EAAkB,SAACC,GAChBpH,OAAOC,UAAUmH,KAAUC,MAAMD,IAClCF,EAAc,GAGdE,EAAQL,GACRG,EAAcH,GAGdK,EAAQL,GACRG,EAAcE,GAGdA,EAAQ,GACRF,EAAc,IAoCtB,OACI,yBAAKX,UAAU,yBACX,yBAAKA,UAAU,+BACX,kBAACe,EAAA,EAAD,CACIC,aAAe,EACfC,kBAAkB,OAClBC,KAAO5B,KAAK6B,KAAK/G,EAAS,IAAM,IAChCgH,IAAM,EACNC,IAAMb,EACNK,MAAQH,EACRY,SA1CO,SAACnC,EAAY0B,GACX,kBAAVA,IAIXD,EAAgBC,GAChBvC,QAAQC,IAAI,0BAA2BsC,GAElB,kBAAVA,GACPF,EAAcE,KAkCNU,SAAWf,GAAY,EACvBgB,OAAK,KAIb,2BAAOpI,KAAK,OAAOyH,MAAQH,EAAaY,SAnC1B,SAACnC,GACnB,IAAM0B,EAAQY,SAAStC,EAAMuC,OAAOb,OACpCD,EAAgBC,MAmCZ,yBAAKjB,QAhCU,SAACT,GACpB,IAEME,EAFQ,YAAOpG,GAEA+F,WAAU,SAACC,GAAD,OAAOA,IAAM9E,MAE/B,IAATkF,GAKJ/F,EAA0B+F,EAAKqB,GAC/BlC,EAAMmD,cALFnD,EAAMmD,eA2BF,kBAACC,GAAA,EAAD,CAAYC,MAAM,UAAUC,aAAW,iBAAiBC,UAAU,OAAOC,QAAS,CAAEC,KAAM,wBACtF,kBAAC,KAAD,Y,SCpFpB,SAASC,GAAa1D,GAAe,IACzBrE,EAA+BqE,EAA/BrE,KAAMgI,EAAyB3D,EAAzB2D,SAAUR,EAAenD,EAAfmD,WADQ,EAENS,aAAU,GAA5BpG,EAFwB,EAExBA,MAAOqG,EAFiB,EAEjBA,OAEf,SAASC,IACL,OACI,yBAAKtC,UAAU,sBACX,yBAAKJ,QAAU,kBAAMyC,EAAO,KAA5B,6BACA,yGACA,yBAAKzC,QAAU,kBAAMyC,EAAO,KAA5B,0DACA,wFAKZ,SAASE,IACL,OACI,yBAAKvC,UAAU,kDACX,yBAAKA,UAAU,8BACX,gCACM7F,EAAKE,KAAKkB,KADhB,SACgCpB,EAAKC,OADrC,UAIJ,yBAAK4F,UAAU,qCACX,kBAAC,GAAD,CAAmB2B,WAAaA,EAAaxH,KAAOA,MAMpE,SAASqI,IACL,OACI,yBAAKxC,UAAU,kDACX,yBAAKA,UAAU,qCACX,kFAAiB7F,EAAKE,KAAKkB,MAC3B,iEAAepB,EAAKC,QACpB,oFAAmBD,EAAKE,KAAKoB,eAC7B,oDAAYtB,EAAKE,KAAKqB,QACtB,kFAAiBvB,EAAKE,KAAKmB,aAC3B,oDAAYrB,EAAKE,KAAKjB,QAMtC,OACI,kBAACqJ,EAAA,EAAD,CACIT,QAAU,CAAEC,KAAM,sBAAuBS,MAAO,wBAChDhE,GAAK,eACL7D,OAASsH,EACTA,SAAWA,EACXQ,QAAUhB,EACViB,aAAc,CACV5H,SAAU,MACVC,WAAY,QAEhB4H,gBAAiB,CACb7H,SAAU,MACVC,WAAY,SAGhB,yBAAK+E,UAAU,gBACC,IAAVhE,GAAe,kBAACsG,EAAD,MACL,IAAVtG,GAAe,kBAACuG,EAAD,MACL,IAAVvG,GAAe,kBAACwG,EAAD,QCnEjC,IA6DMM,GAAwBhF,aAJN,SAAC9B,GAAD,MAAmB,CACvC+B,QAAS/B,EAAMrC,MAGWmE,EAlDP,SAACU,GAAkB,IAG9BvF,EAFYuF,EAAZT,QACAnE,UACAX,MAH6B,EAKCwH,mBAAsB,MALvB,mBAK9BtC,EAL8B,KAKjB4E,EALiB,OAMLtC,mBAAS,MANJ,mBAM9B0B,EAN8B,KAMpBa,EANoB,KAQ/BpE,EAAe,SAACzE,EAAY0F,GAC9BkD,EAAe5I,GACf6I,EAAYnD,EAAEoD,gBAoBlB,OACI,sCACO9E,GAAe,kBAAC+D,GAAD,CAAcP,WAnBrB,WACfoB,EAAe,MACfC,EAAY,OAiBkDb,SAAWA,EAAWhI,KAAOgE,IAEvF,kBAAC,IAAD,CAAW+E,YAAY,eAClB,SAACC,EAAUxD,GAAX,OACG,uCAAKG,IAAMqD,EAASpD,SAAWqD,OAAqBzD,EAAS0D,eAzCvC,CACtCC,SAAU,OACVC,OAAQ,UAuC4FJ,EAASK,gBAjBlGvK,EAAMwK,KAAI,SAACtJ,EAAMuE,GACpB,OAAO,kBAAC,EAAD,CACHE,aAAeA,EACfxD,IAAG,UAjCC,oBAiCD,OAAoBjB,EAAKE,KAAKC,SACjCoE,GAAKA,EACLvE,KAAOA,EACPwE,aAAW,OAaDwE,EAASO,oBCnD7BC,GAAY,SAACnF,GAAkB,IACzBtD,EAAUsD,EAAVtD,MAER,OACI,yBAAK8E,UAAU,aACX,yBAAKA,UAAU,UAAf,2DACiB9E,EADjB,KAGA,yBAAK8E,UAAU,oBACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,kBAEnB,yBAAKA,UAAU,wBAEX,yBAAKA,UAAU,uBACX,kBAAC,GAAD,OAGJ,yBAAKA,UAAU,wBAAf,4BCad4D,GAA0B9F,aARR,SAAC9B,GAAD,MAAmB,CACvC+B,QAAS/B,EAAMrC,OAGQ,SAACT,GAAD,MAAe,CACtCF,kBAAmB,SAACC,GAAD,OAAmBC,EAASF,EAAkBC,QAGrC6E,EAzBP,SAACU,GAAkB,IAGhCvF,EAFYuF,EAAZT,QACA5C,OACAlC,MAER,OACI,kBAAC,IAAD,CAAWiK,YAAY,cACtB,SAACC,EAAUxD,GAAX,OACG,yCAAUwD,EAASK,eAAnB,CAAoC1D,IAAMqD,EAASpD,SAAWqD,OAAqBzD,EAAS0D,eAb9D,CACtCC,SAAU,OACVC,OAAQ,WAYMtK,EAAMwK,KAAI,SAACtJ,EAAMkF,GAAP,OAAe,kBAAC,EAAD,CAAeT,aAAe,kBAAM,GAAQxD,IAAG,UArBtE,iBAqBsE,OAAoBjB,EAAKE,KAAKC,SAAYoE,GAAKW,EAAMlF,KAAOA,OACpIgJ,EAASO,mBC3BrBG,GAAc,WAEhB,OACI,6BACI,yBAAK7D,UAAU,gBACX,yBAAKA,UAAU,UAAf,oBACA,yBAAKA,UAAU,uBACX,kBAAC,GAAD,U,6BCHL8D,G,mFAAf,WAAyCxJ,EAAiBF,GAA1D,SAAA2J,EAAA,+EACWC,KAAIC,WAAW,6BAA8BlK,KAAKE,UAAU,CAAEK,UAASF,aADlF,4C,+BAKe8J,G,mFAAf,WAAyCzF,EAAiBrE,GAA1D,SAAA2J,EAAA,+EACWC,KAAIC,WAAW,6BAA8BlK,KAAKE,UAAU,CAACwE,UAASrE,aADjF,4C,oCCCM+J,GAAO,SAACC,EAAQC,EAAaC,EAAiBC,GAChD,IAAMC,EAAcC,MAAMC,KAAKN,GACzBO,EAAYF,MAAMC,KAAKL,GAFiD,EAG5DG,EAAYhK,OAAO8J,EAAgB7E,MAAO,GAArDmF,EAHuE,oBAK9ED,EAAUnK,OAAO+J,EAAqB9E,MAAO,EAAGmF,GAEhD,IAAMC,EAAS,GAMf,OALAA,EAAOP,EAAgBpB,aAAesB,EACtCK,EAAON,EAAqBrB,aAAeyB,EAE3CrG,QAAQC,IAAI,SAAUsG,GAEfA,GAILC,GAAU,SAACC,EAAMC,EAAYC,GAC/B,IAAMJ,EAASJ,MAAMC,KAAKK,GADuB,EAE/BF,EAAOrK,OAAOwK,EAAY,GAArCJ,EAF0C,oBAKjD,OAFAC,EAAOrK,OAAOyK,EAAU,EAAGL,GAEpBC,GA4HX,IAUMK,GAAuBpH,aAVL,SAAC9B,GAAD,MAAmB,CACvC+B,QAAS/B,EAAMrC,OAGQ,SAACT,GAAD,MAAe,CACtCF,kBAAmB,SAACC,GAAD,OAAmBC,EAASF,EAAkBC,KACjEyB,eAAgB,SAACzB,GAAD,OAAmBC,EAASwB,EAAezB,KAC3DkM,YAAa,SAACC,GAAD,OAAWlM,GjBxJP0B,EiBwJ4BwK,EjBvJtC,SAAClM,EAAUC,GACTyB,EAASyK,eAAe,YACzBzK,EAAQ,eAAQA,EAAR,CAAkBG,OAAQ,CAAEE,WAAY,SAAUD,SAAU,YACpEsD,QAAQC,IAAI,WAAW3D,IAG3B1B,EAAS,CACLE,KAhBgB,eAiBhBC,QAASuB,OATD,IAACA,MiB2JQkD,EA5H7B,SAAuBU,GAAe,IAC1BT,EAA4DS,EAA5DT,QAAS/E,EAAmDwF,EAAnDxF,kBAAmB0B,EAAgC8D,EAAhC9D,eAAgByK,EAAgB3G,EAAhB2G,YAC5CvL,EAAgCmE,EAAhCnE,UAAWuB,EAAqB4C,EAArB5C,OAAQP,EAAamD,EAAbnD,SACnBM,EAAUtB,EAAVsB,MAEFoK,EAAU,CACZC,UAAW,SACXC,WAAY,aAGVC,EAAU,SAAC/G,GAAD,OAAQX,EAAQuH,EAAQ5G,IAAKzF,OAEvCyM,EAAS,uCAAG,WAAOb,GAAP,+BAAAd,EAAA,yDACNK,EAAwBS,EAAxBT,OAAQC,EAAgBQ,EAAhBR,YAEhB/F,QAAQC,IAAI,SAAUsG,GACtBvG,QAAQC,IAAI,SAAU6F,GACtB9F,QAAQC,IAAI,cAAe8F,GAGtBA,EARS,oDAaVD,EAAOlB,cAAgBmB,EAAYnB,YAbzB,iBAcJjK,EAAQ6L,GACVW,EAAQrB,EAAOlB,aACfkB,EAAO3E,MACP4E,EAAY5E,OAGhBnB,QAAQC,IAAI,WAAYtF,GACxBqF,QAAQC,IAAI,wBAAyB6F,EAAOlB,aAC5C5E,QAAQC,IAAI,uBAAwB8F,EAAY5E,OAErB,cAAvB2E,EAAOlB,aACPxI,EAAezB,GAEQ,eAAvBmL,EAAOlB,aACPlK,EAAkBC,GA5BZ,2BAgCJ4L,EAASV,GACXsB,EAAQrB,EAAOlB,aACfuC,EAAQpB,EAAYnB,aACpBkB,EACAC,GAKuB,eAAvBD,EAAOlB,YAzCD,wBA0CAyC,EA1CA,YA0CqB/L,EAAUX,OAC/BkB,EAAOwL,EAAevB,EAAO3E,OA3C7B,UA4CqByE,GAA0B/J,EAAKiB,IAAKjB,EAAKC,QA5C9D,eA6CWyK,SACbnK,EAAemK,EAAOU,WACtBvM,EAAkB6L,EAAOW,aA/CvB,WAwDiB,cAAvBpB,EAAOlB,YAxDD,wBAyDA0C,EAzDA,YAyDkBzK,EAAOlC,OACzBkB,EAAOyL,EAAYxB,EAAO3E,OAChCnB,QAAQC,IAAI,wGAA2BpE,GA3DjC,UA8DqB2J,GAA0B3J,EAAKE,KAAKC,QAASH,EAAKC,QA9DvE,SA8DAyL,EA9DA,QA+DWhB,QACbnK,EAAemK,EAAOU,WACtBvM,EAAkB6L,EAAOW,YACzBL,EAAY,CAAEtK,MAAM,EAAMC,KAAM+K,EAAa/K,KAAMC,OAAQ,CAAEC,SAAU,SAAUC,WAAY,aAE7FkK,EAAY,CAAEtK,MAAM,EAAMC,KAAM+K,EAAa/K,KAAMC,OAAQ,CAAEC,SAAU,SAAUC,WAAY,YApE3F,4CAAH,sDAkFf,OACI,yBAAK+E,UAAU,MACX,kBAAC8F,GAAA,EAAD,CACIlD,aAAc,CAAE5H,SAAUJ,EAASG,OAAOC,SAAUC,WAAYL,EAASG,OAAOE,YAChFG,IAAG,UAAMR,EAASG,OAAOC,SAAtB,YAAkCJ,EAASG,OAAOE,YACrDJ,KAAOD,EAASC,KAChBkL,QAAUnL,EAASE,KACnBkL,iBAAmB,MAGvB,yBAAKhG,UAAU,gBACX,kBAAC,IAAD,CAAiB0F,UAAYA,GACzB,kBAAC,GAAD,MACA,kBAAC,GAAD,CAAWxK,MAAQA,UCnJvC,SAAS+K,KACP,OACE,yBAAK7C,MAAO,CAAC8C,SAAU,WAAYC,IAAK,EAAGC,KAAM,IAC/C,6BACE,4BACE,4BAAI,uBAAGC,KAAK,IAAIzG,QAAU,kBAAMxD,EAAQkK,KAAK,cAAzC,+CACJ,4BAAI,uBAAGD,KAAK,IAAIzG,QAAU,kBAAMxD,EAAQkK,KAAK,YAAzC,iBAOd,SAASC,GAAT,GAA2B,EAAXjK,QAGd,OAFAgC,QAAQC,IAAI,WAGV,gIAIJ,SAASiI,GAAIhI,GAOX,OAHApC,EAAQkK,KAAK,UAIX,yBAAKtG,UAAU,OACb,kBAACiG,GAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAK,IAAI3E,UAAYwE,KAClC,kBAAC,IAAD,CAAOG,KAAK,MAAM3E,UAAY4E,OChCtC,SAASC,KACL,OACI,kBAAC,IAAD,CAAUjK,MAAQA,GACd,kBAAC,IAAD,CAAiBL,QAAUA,GACvB,kBAACkK,GAAD,QCHhBK,IAASC,OACP,kBAACF,GAAD,MACAG,SAASC,eAAe,StBiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlJ,QAAQkJ,MAAMA,EAAMzB,YuB5IxBzH,QAAQC,IAAI,wBAEZyF,KAAIyD,SAAS,wBAAwB,SAACpN,GCJd,IAACpB,EDKrBqF,QAAQC,IAAI,0FAA0BlE,GACtCiE,QAAQC,IAAIxE,KAAKE,UAAUI,ICNNpB,EDODoB,ECNxB+B,EAAQkK,KAAK,sBAAuBrN,MDSpC+K,KAAIyD,SAAS,2BAA2B,SAACvM,ICNd,SAACA,GAC5BkB,EAAQkK,KAAK,yBAA0BpL,GDMnCwM,CAAuBxM,O,mBEd/ByM,EAAOC,QAAU,IAA0B,8C,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,+C","file":"static/js/main.1d57228f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/* ОПИСАНИЕ ПРЕДМЕТА */\r\nexport interface BodyArmourData extends ItemData {\r\n    defence?: number;\r\n}\r\n\r\nexport interface WeaponData extends ItemData {\r\n    clip?: number;\r\n}\r\n\r\n/* ОПИСАНИЕ ПРЕДМЕТА */\r\nexport enum ItemType {\r\n    WEAPON = 'WEAPON',\r\n    ARMOR = 'ARMOR',\r\n    BACKPACK = 'BACKPACK',\r\n    AMMO = 'AMMO',\r\n}\r\n\r\nexport enum ItemKey {\r\n    ITEM_WEAPON_AK47 = 'ITEM_WEAPON_AK47',\r\n    ITEM_ARMOR = 'ITEM_ARMOR',\r\n    ITEM_AMMO_SHOTGUN = 'ITEM_AMMO_SHOTGUN',\r\n}\r\n\r\nexport type Item = {\r\n    key: ItemKey;\r\n    amount: number;\r\n    data: ItemData;\r\n}\r\n\r\nexport type ItemData = {\r\n    type: ItemType;\r\n    name: string; // Название предмета.\r\n    description: string;\r\n    maxStackCount: number; // Максимальный стак предмета.\r\n    weight: number; // Вес предмета (1 шт).\r\n    shortid: string;\r\n}\r\n\r\nexport interface DataBodyArmour extends ItemData {\r\n    defence?: number;\r\n}\r\n\r\nexport interface DataWeapon extends ItemData {\r\n    clip?: number;\r\n}\r\n\r\nexport interface DataBackpack extends ItemData {\r\n    slots: number;\r\n}","import { Item } from \"../types\";\r\nimport shortid from 'shortid';\r\nimport { SnackbarOrigin } from \"@material-ui/core/Snackbar\";\r\n\r\nexport const SET_INVENTORY_ITEMS = 'SET_INVENTORY_ITEMS';\r\nexport const SET_GROUND_ITEMS = 'ITEMS_GROUND_ITEMS';\r\nexport const SET_INVENTORY_SLOTS = 'SET_INVENTORY_SLOTS';\r\nexport const SET_SNACKBAR = 'SET_SNACKBAR';\r\n\r\nexport type SnackbarType = {\r\n    open: boolean;\r\n    text?: string\r\n    origin?: SnackbarOrigin;\r\n}\r\n\r\nconst setSnackbar = (snackbar: SnackbarType) => {\r\n    return (dispatch, getState) => {\r\n        if (!snackbar.hasOwnProperty('origin')) {\r\n            snackbar = { ...snackbar, origin: { horizontal: 'center', vertical: 'bottom' } }\r\n            console.log('snackbar',snackbar)\r\n        }\r\n\r\n        dispatch({\r\n            type: SET_SNACKBAR,\r\n            payload: snackbar,\r\n        });\r\n    };\r\n};\r\n\r\nconst addInventoryItem = () => {\r\n    return (dispatch, getState) => {\r\n        console.log('addInventoryItem getState', getState());\r\n    };\r\n};\r\n\r\nconst stackItems = (currentItemIndex: number, nextItemIndex: number) => {\r\n    return (dispatch, getState) => {\r\n        const { UI } = getState();\r\n        const { inventory } = UI;\r\n        const { items } = inventory;\r\n        const invItems = [...items];        \r\n\r\n        if (currentItemIndex === -1 || nextItemIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        const currentItem = {...items[currentItemIndex]};\r\n        const nextItem = {...items[nextItemIndex]};\r\n\r\n        if (currentItem.key !== nextItem.key) {\r\n            return;\r\n        }\r\n\r\n        const maxStackCount = currentItem.data.maxStackCount;\r\n        const sum = currentItem.amount + nextItem.amount;\r\n\r\n        console.log('maxStackCount', maxStackCount);\r\n        console.log('sum', sum);\r\n\r\n        if (sum > maxStackCount) {\r\n            const amount = sum - maxStackCount;\r\n            currentItem.amount = amount;\r\n            nextItem.amount = maxStackCount;\r\n            invItems.splice(currentItemIndex, 1, currentItem);\r\n            invItems.splice(nextItemIndex, 1, nextItem);\r\n        } else {\r\n            nextItem.amount = sum; \r\n            invItems.splice(currentItemIndex, 1, nextItem);\r\n            invItems.splice(nextItemIndex, 1);\r\n        }\r\n\r\n\r\n        \r\n        dispatch({\r\n            type: SET_INVENTORY_ITEMS,\r\n            payload: invItems,\r\n        });\r\n    };\r\n};\r\n\r\nconst setInventorySlots = (slots: number) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: SET_INVENTORY_SLOTS,\r\n            payload: slots,\r\n        })\r\n    };\r\n};\r\n\r\nconst setInventoryItems = (items: Item[]) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: SET_INVENTORY_ITEMS,\r\n            payload: [...items],\r\n        })\r\n    };\r\n};\r\n\r\nconst splitInventoryItemByIndex = (itemId: number, splitCount: number) => {\r\n    return (dispatch, getState) => {\r\n        if (!Number.isInteger(splitCount)) {\r\n            return;\r\n        }\r\n\r\n        if (splitCount <= 0) {\r\n            return;\r\n        }\r\n\r\n        const { UI } = getState();\r\n        const { inventory } = UI;\r\n        const { items } = inventory;\r\n        const invItems = [...items];\r\n        const findItem = JSON.parse(JSON.stringify(invItems[itemId]));\r\n        const newItem = JSON.parse(JSON.stringify(findItem));\r\n        const item = invItems[itemId];\r\n\r\n        if (item.amount <= splitCount) {\r\n            return;\r\n        }\r\n\r\n        const amount = item.amount - splitCount;\r\n        findItem.amount = amount;\r\n        newItem.data.shortid = `__newItem${shortid.generate()}`;\r\n        newItem.amount = splitCount;\r\n    \r\n        invItems.splice(itemId, 1);\r\n        invItems.unshift(findItem, newItem);\r\n    \r\n        dispatch(setInventoryItems(invItems));\r\n    };\r\n};\r\n\r\nconst setGroundItems = (items: Item[]) => {\r\n    return (dispatch, getState) => {\r\n        dispatch({\r\n            type: SET_GROUND_ITEMS,\r\n            payload: [...items],\r\n        })\r\n    };\r\n};\r\n\r\nexport {\r\n    setSnackbar,\r\n    addInventoryItem,\r\n    setInventoryItems,\r\n    setInventorySlots,\r\n    setGroundItems,\r\n    stackItems,\r\n    splitInventoryItemByIndex,\r\n}","import { SET_INVENTORY_ITEMS, SET_GROUND_ITEMS, SET_INVENTORY_SLOTS, SET_SNACKBAR } from \"../actions/inventoryActions\";\r\nimport shortid from 'shortid';\r\nimport { Item, ItemKey, ItemType } from \"../types\";\r\nimport { SnackbarOrigin } from \"@material-ui/core/Snackbar\";\r\n\r\nexport type UIState = {\r\n    snackbar: {\r\n        open: boolean,\r\n        text: string,\r\n        origin: SnackbarOrigin,\r\n    };\r\n    inventory: {\r\n        slots: number,\r\n        items: Item[],\r\n    };\r\n    ground: {\r\n        items: Item[],\r\n    }\r\n}\r\n\r\nconst getData = (): Item[] => [\r\n    {\r\n        key: ItemKey.ITEM_WEAPON_AK47, \r\n        amount: 1, \r\n        data: {\r\n            type: ItemType.WEAPON,\r\n            name: 'Kalash',\r\n            description: 'Убивац',\r\n            maxStackCount: 1,\r\n            shortid: shortid.generate(),\r\n            weight: 5,\r\n        }\r\n    },\r\n\r\n    {\r\n        key: ItemKey.ITEM_AMMO_SHOTGUN, \r\n        amount: 99, \r\n        data: {\r\n            type: ItemType.AMMO,\r\n            name: 'SHOTGUN SHELL',\r\n            description: 'Пережаризац',\r\n            maxStackCount: 30,\r\n            shortid: shortid.generate(),\r\n            weight: 0.1,\r\n        }\r\n    },\r\n\r\n    {\r\n        key: ItemKey.ITEM_ARMOR, \r\n        amount: 1, \r\n        data: {\r\n            type: ItemType.ARMOR,\r\n            name: 'ARMOR',\r\n            description: 'Защищац',\r\n            maxStackCount: 1,\r\n            shortid: shortid.generate(),\r\n            weight: 6,\r\n        }\r\n    },\r\n\r\n    {\r\n        key: ItemKey.ITEM_WEAPON_AK47, \r\n        amount: 1, \r\n        data: {\r\n            type: ItemType.WEAPON,\r\n            name: 'Kalash',\r\n            description: 'Убивац',\r\n            maxStackCount: 1,\r\n            shortid: shortid.generate(),\r\n            weight: 5,\r\n        }\r\n    },\r\n];\r\n\r\nconst initialState: UIState = {\r\n    snackbar: {\r\n        open: false,\r\n        text: '',\r\n        origin: {\r\n            vertical: 'bottom',\r\n            horizontal: 'center',            \r\n        }\r\n    },\r\n    inventory: {\r\n        slots: 10,\r\n        items: [],\r\n    },\r\n    ground: {\r\n        items: getData(),\r\n    },\r\n};\r\n\r\nfunction UIReducer(state = initialState, action: any) {\r\n    switch (action.type) {\r\n        case SET_SNACKBAR:\r\n            return { ...state, snackbar: {...action.payload} }\r\n\r\n        case SET_INVENTORY_ITEMS:\r\n            state.inventory.items = action.payload;\r\n            return { ...state };\r\n\r\n        case SET_INVENTORY_SLOTS:\r\n            state.inventory.slots = action.payload;\r\n            return { ...state }\r\n\r\n        case SET_GROUND_ITEMS:\r\n            return { ...state, ground: { items: action.payload } };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport {\r\n    UIReducer,\r\n}","import { SET_SHOW } from \"../actions/clothesActions\";\r\n\r\nexport type ClothesState = {\r\n    isShow: boolean;\r\n}\r\n\r\nconst initialState: ClothesState = {\r\n    isShow: true,\r\n};\r\n\r\nfunction ClothesReducer(state: ClothesState = initialState, action: any) {\r\n    switch (action.type) {\r\n        case SET_SHOW:\r\n            return { ...state, isShow: action.payload };\r\n\r\n        default:\r\n            return { ...state };\r\n            \r\n    }\r\n}\r\n\r\nexport {\r\n    ClothesReducer,\r\n}","export const SET_SHOW = 'IS_SHOW';\r\n\r\nfunction setShow(bool: boolean) {\r\n    return (dispatch, getState) => {\r\n\r\n        console.log('setShow', bool);\r\n\r\n        dispatch({\r\n            type: SET_SHOW,\r\n            payload: bool,\r\n        });\r\n    };\r\n}\r\n\r\nexport {\r\n    setShow,\r\n}","import EventEmitter from 'wolfy87-eventemitter';\r\n\r\nconst emitter: any = new EventEmitter();\r\n\r\nexport {\r\n    emitter,\r\n}","import { createMemoryHistory  } from 'history';\r\nimport { createStore, applyMiddleware, compose } from \"redux\";\r\nimport { createRootReducer } from \"../reducers\";\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport { routerMiddleware } from 'connected-react-router';\r\nimport { PlayerEvents } from '../helpers/playerEvents';\r\n\r\nconst history = createMemoryHistory({\r\n    initialEntries: [ '/one', '/two', { pathname: '/three' } ],\r\n    initialIndex: 1\r\n});\r\n\r\nconst store = createStore(\r\n    createRootReducer(history), \r\n    compose(\r\n        applyMiddleware(\r\n            routerMiddleware(history),\r\n            thunk, \r\n            logger,\r\n        ),\r\n    ),\r\n);\r\n\r\nPlayerEvents(store.dispatch, store.getState);\r\n\r\nexport {\r\n    history,\r\n    store,\r\n}","import { combineReducers } from \"redux\";\r\nimport { UIReducer, UIState } from \"./UIReducer\";\r\nimport { ClothesReducer, ClothesState } from \"./clothesReducer\";\r\nimport { connectRouter } from 'connected-react-router'\r\n\r\nexport type State = {\r\n    UI: UIState;\r\n    clothes: ClothesState;\r\n}\r\n\r\nconst createRootReducer = (history) => combineReducers({\r\n    UI: UIReducer,\r\n    clothes: ClothesReducer,\r\n    router: connectRouter(history),\r\n  });\r\n\r\nexport {\r\n    createRootReducer,\r\n}","import { push } from 'connected-react-router'\r\nimport { emitter } from '../emitter';\r\nimport { Item } from '../../types';\r\nimport { setGroundItems, setInventorySlots } from '../../actions/inventoryActions';\r\n\r\nfunction PlayerEvents(dispatch, getState) {\r\n    emitter.on('goToHome', () => {\r\n        dispatch(push('/'));\r\n    });\r\n\r\n    emitter.on('goToUi', () => {\r\n        dispatch(push('/ui'));\r\n    });\r\n\r\n    emitter.on('eventSetGroundItems', (items: Item[]) => {\r\n        dispatch(setGroundItems(items));\r\n    });\r\n\r\n    emitter.on('eventSetInventorySlots', (slots: number) => {\r\n        dispatch(setInventorySlots(slots));\r\n    });\r\n}\r\n\r\nexport {\r\n    PlayerEvents,\r\n}\r\n\r\n/**\r\n\r\n1) Предметы на земле. Нужно создать функцию которая будет добавлять в в items-ground предметы.\r\n- Если игрок встал на точку с лутом - предметы отрисовались.\r\n- Если игрок вышел с точки - они перерисовались.\r\n\r\n*/","import img_item_weapon_ak47 from '../assets/items/item_weapon_ak47.png';\r\nimport img_item_armor from '../assets/items/item_armor.png';\r\nimport img_item_ammo_shotgun from '../assets/items/item_ammo_shotgun.png';\r\nimport { ItemKey } from '../types';\r\n\r\nconst images = {\r\n    [ItemKey.ITEM_WEAPON_AK47]: img_item_weapon_ak47,\r\n    [ItemKey.ITEM_ARMOR]: img_item_armor,\r\n    [ItemKey.ITEM_AMMO_SHOTGUN]: img_item_ammo_shotgun,\r\n};\r\n\r\nconst getItemImage = (itemKey: ItemKey) => images[itemKey];\r\n\r\nexport {\r\n    getItemImage,\r\n}","import React, { useEffect } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { Item } from \"../../../../types\";\r\nimport { getItemImage } from \"../../../../helpers/getImages\";\r\nimport { connect } from \"react-redux\";\r\nimport { setInventoryItems, splitInventoryItemByIndex, stackItems } from \"../../../../actions/inventoryActions\";\r\nimport { State } from \"../../../../reducers\";\r\nimport { UIState } from \"../../../../reducers/UIReducer\";\r\nimport { GiRapidshareArrow } from \"react-icons/gi\";\r\n\r\ntype Props = {\r\n    item: Item;\r\n    id: number;\r\n    UIState: UIState;\r\n    isPopover?: boolean;\r\n    isInventory?: boolean;\r\n    onSelectItem: (item: Item, event: any) => any;\r\n    setInventoryItems: (items: Item[]) => any;\r\n    splitInventoryItemByIndex: (itemId: number, splitCount: number) => any;\r\n    stackItems: (currentItemIndex: number, nextItemIndex: number) => any;\r\n}\r\n\r\n// const getOccupiedSlots = (): number => {\r\n//     let weight = 0;\r\n//     invItems.forEach(item => weight += (item.amount * item.data.weight));\r\n//     console.log('getOccupiedSlots', weight);\r\n//     return weight;\r\n// };\r\n\r\nconst InventoryCell = (props: Props) => {\r\n    const { item, id, UIState, setInventoryItems, splitInventoryItemByIndex, isInventory, onSelectItem, stackItems } = props;\r\n    const { inventory } = UIState;\r\n    const { items } = inventory;\r\n    const itemImage = getItemImage(item.key);\r\n\r\n    let isStack = false;\r\n    let currentItem;\r\n    let nextItem;\r\n    if (isInventory) {\r\n        const currentItemIdx = items.findIndex(i => i === item);\r\n        if (currentItemIdx !== -1) {\r\n\r\n            currentItem = items[currentItemIdx];\r\n            nextItem = items[currentItemIdx + 1];\r\n\r\n            if (currentItem && nextItem) {\r\n                if (currentItem.key === nextItem.key && currentItem.data.maxStackCount > 1) {\r\n                    isStack = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const onMouseDown = (event) => {\r\n        if (!isInventory) {\r\n            return;\r\n        }\r\n\r\n        // Клик колесиком мыши на элемент.\r\n        if (event.button === 2) {\r\n            if (item.amount <= 1) {\r\n                return;\r\n            }\r\n\r\n            const idx = items.findIndex(i => i === item);\r\n\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n\r\n            splitInventoryItemByIndex(idx, Math.floor(item.amount / 2));\r\n        }\r\n    }\r\n\r\n    const onStackClick = (event: any) => {\r\n        event.stopPropagation();\r\n        const currentItemIndex = items.findIndex(i => i === currentItem);\r\n        const nextItemIndex = items.findIndex(i => i === nextItem);\r\n        stackItems(currentItemIndex, nextItemIndex)\r\n    };\r\n\r\n    return (\r\n        <Draggable draggableId={ item.data.shortid } index={ id }>\r\n            {(dragProvided, snapshot) => {\r\n                return (\r\n                    <div \r\n                        onClick={ onSelectItem ? (e) => onSelectItem(item, e) : () => false }\r\n                        onMouseDown={ onMouseDown }\r\n                    >\r\n                        <div ref={ dragProvided.innerRef }>\r\n                            <div \r\n                                className=\" inventory-cell\"\r\n                                { ...dragProvided.draggableProps }\r\n                                { ...dragProvided.dragHandleProps }\r\n                            >\r\n                                <div className=\"inventory-cell-image\" >\r\n                                    <img src={ itemImage } draggable={ false } />\r\n                                </div>\r\n                                <div className=\"inventory-cell-name\">\r\n                                    { item.data.name }\r\n                                </div>\r\n                                <div className=\"inventory-cell-amount\">\r\n                                    { item.amount }\r\n                                </div>\r\n\r\n                                { isStack && <div className='isStack' onClick={ (e) => onStackClick(e) }><GiRapidshareArrow /></div> }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }} \r\n        </Draggable>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInventoryItems: (items: Item[]) => dispatch(setInventoryItems(items)),\r\n    splitInventoryItemByIndex: (itemId: number, splitCount: number) => dispatch(splitInventoryItemByIndex(itemId, splitCount)),\r\n    stackItems: (currentItemIndex: number, nextItemIndex: number) => dispatch(stackItems(currentItemIndex, nextItemIndex)),\r\n});\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    UIState: state.UI,\r\n});\r\n\r\nconst InventoryCellConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(InventoryCell);\r\n\r\nexport {\r\n    InventoryCellConnect as InventoryCell,\r\n}","import React, { useState } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { MdCallSplit } from \"react-icons/md\";\r\nimport { connect } from 'react-redux';\r\nimport { splitInventoryItemByIndex } from '../../../../../actions/inventoryActions';\r\nimport { UIState } from '../../../../../reducers/UIReducer';\r\nimport { Item } from '../../../../../types';\r\nimport { State } from '../../../../../reducers';\r\n\r\ntype Props = {\r\n    item: Item;\r\n    UIState: UIState;\r\n    splitInventoryItemByIndex: (itemId: number, splitCount: number) => any;\r\n    onPopClose: () => any;\r\n}\r\n\r\nfunction TabSplitComponent(props: Props) {\r\n    const { item, splitInventoryItemByIndex, UIState } = props;\r\n    const { inventory } = UIState;\r\n    const { items } = inventory;\r\n    const amount = item.amount;\r\n    const maxSplit = amount - 1;\r\n\r\n    const [inputValue, setInputValue] = useState<any>(maxSplit);\r\n\r\n    const checkRangeValue = (value: number) => {\r\n        if (!Number.isInteger(value) || isNaN(value)) {\r\n            setInputValue(0);\r\n        }\r\n        \r\n        if (value > maxSplit) {\r\n            setInputValue(maxSplit);\r\n        } \r\n\r\n        if (value < maxSplit) {\r\n            setInputValue(value);\r\n        }\r\n\r\n        if (value < 0) {\r\n            setInputValue(0);\r\n        }\r\n    };\r\n\r\n    const onSliderChange = (event: any, value: number | number[]) => {\r\n        if (typeof value !== 'number') {\r\n            return;\r\n        }\r\n\r\n        checkRangeValue(value);\r\n        console.log('-> onSliderChange value', value);\r\n\r\n        if (typeof value === 'number') {\r\n            setInputValue(value);\r\n        }\r\n    };\r\n\r\n    const onInputChange = (event: any) => { \r\n        const value = parseInt(event.target.value);\r\n        checkRangeValue(value);\r\n    };\r\n\r\n    const onIconBtnClick = (event: any) => {\r\n        const invItems = [...items];\r\n\r\n        const idx = invItems.findIndex((i) => i === item);\r\n\r\n        if (idx === -1) {\r\n            props.onPopClose();\r\n            return;\r\n        }\r\n\r\n        splitInventoryItemByIndex(idx, inputValue);\r\n        props.onPopClose();\r\n    };\r\n\r\n    return (\r\n        <div className=\"popover-tab-container\">\r\n            <div className=\"popover-tab-container__item\">\r\n                <Slider\r\n                    defaultValue={ 1 }\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={ Math.ceil(amount / 100 * 10) } // 1 step = 10%.\r\n                    min={ 1 }\r\n                    max={ maxSplit }\r\n                    value={ inputValue }\r\n                    onChange={ onSliderChange }\r\n                    disabled={ maxSplit <= 1 }\r\n                    marks\r\n                />\r\n            </div>\r\n\r\n            <input type=\"text\" value={ inputValue } onChange={ onInputChange } />\r\n            \r\n            <div onClick={ onIconBtnClick }>\r\n                <IconButton color=\"inherit\" aria-label=\"upload picture\" component=\"span\" classes={{ root: 'popover-icon-button' }}>\r\n                    <MdCallSplit />\r\n                </IconButton>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    UIState: state.UI,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    splitInventoryItemByIndex: (itemId: number, splitCount: number) => dispatch(splitInventoryItemByIndex(itemId, splitCount)),\r\n});\r\n\r\nconst TabComponentConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TabSplitComponent);\r\n\r\nexport {\r\n    TabComponentConnect as TabSplitComponent,\r\n}","import React from \"react\";\r\nimport { Item } from \"../../../../types\";\r\nimport { Popover } from '@material-ui/core';\r\nimport { TabSplitComponent } from \"./TabSplitComponent\";\r\nimport { useToggle } from \"@umijs/hooks\";\r\n\r\ntype Props = {\r\n    anchorEl: any;\r\n    item: Item;\r\n    onPopClose: () => any;\r\n}\r\n\r\nfunction SelectedItem(props: Props) {\r\n    const { item, anchorEl, onPopClose } = props;\r\n    const { state, toggle } = useToggle(0);\r\n\r\n    function Tab1() {\r\n        return (\r\n            <div className='popover-select-tab'>\r\n                <div onClick={ () => toggle(2) }>Инфо.</div>\r\n                <div>Использовать</div>\r\n                <div onClick={ () => toggle(1) }>Разделить</div>\r\n                <div>Выбросить</div>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    function Tab2() {\r\n        return (\r\n            <div className='cell-popover-content cell-popover-content-tab2'>\r\n                <div className=\"cell-popover-content__data\">\r\n                    <strong>\r\n                        { item.data.name } (&nbsp;{ item.amount }&nbsp;)\r\n                    </strong>\r\n                </div>\r\n                <div className=\"cell-popover-content__change-data\">\r\n                    <TabSplitComponent onPopClose={ onPopClose } item={ item } />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    function Tab3() {\r\n        return (\r\n            <div className='cell-popover-content cell-popover-content-tab3'>\r\n                <div className=\"cell-popover-content__change-data\">\r\n                    <div>Название: { item.data.name }</div>\r\n                    <div>Кол-во: { item.amount }</div>\r\n                    <div>Макс. стак: { item.data.maxStackCount }</div>\r\n                    <div>вес: { item.data.weight }</div>\r\n                    <div>Описание: { item.data.description }</div>\r\n                    <div>Тип: { item.data.type }</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Popover\r\n            classes={ { root: 'rootOverridePopover', paper: 'paperOverridePopover' } }\r\n            id={ 'cell-popover' }\r\n            open={ !!anchorEl }\r\n            anchorEl={ anchorEl }\r\n            onClose={ onPopClose }\r\n            anchorOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\"\r\n            }}\r\n            transformOrigin={{\r\n                vertical: \"top\",\r\n                horizontal: \"left\"\r\n            }}\r\n        >\r\n            <div className=\"cell-popover\">\r\n                { state === 0 && <Tab1 /> }\r\n                { state === 1 && <Tab2 /> }\r\n                { state === 2 && <Tab3 /> }\r\n            </div>\r\n        </Popover>\r\n    );\r\n};\r\n\r\nexport {\r\n    SelectedItem,\r\n}","import React, { useState } from \"react\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../../../../reducers\";\r\nimport { UIState } from \"../../../../reducers/UIReducer\";\r\nimport { InventoryCell } from \"../InventoryCell\";\r\nimport { Item } from \"../../../../types\";\r\nimport { SelectedItem } from \"../SelectedItem\";\r\n\r\nconst shortString = '__inventoryCells';\r\n\r\ntype Props = {\r\n    UIState: UIState;\r\n}\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    overflow: 'auto',\r\n    height: '100%',\r\n});\r\n\r\nconst InventoryCells = (props: Props) => {\r\n    const { UIState } = props;\r\n    const { inventory } = UIState;\r\n    const { items } = inventory;\r\n\r\n    const [currentItem, setCurrentItem] = useState<Item | null>(null);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n    const onSelectItem = (item: Item, e: any) => {\r\n        setCurrentItem(item);\r\n        setAnchorEl(e.currentTarget);\r\n    };\r\n\r\n    const onPopClose = () => {\r\n        setCurrentItem(null);\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    const getItems = () => {\r\n        return items.map((item, id) => {\r\n            return <InventoryCell \r\n                onSelectItem={ onSelectItem } \r\n                key={ `${shortString}${item.data.shortid}` } \r\n                id={ id } \r\n                item={ item } \r\n                isInventory \r\n            />\r\n        });\r\n    };\r\n    \r\n    return (\r\n        <>\r\n            {!!currentItem && <SelectedItem onPopClose={ onPopClose } anchorEl={ anchorEl } item={ currentItem } />}\r\n            \r\n            <Droppable droppableId=\"droppable1\">\r\n                {(provided, snapshot) => (\r\n                    <div ref={ provided.innerRef } style={ getListStyle(snapshot.isDraggingOver) } { ...provided.droppableProps }>\r\n                        { getItems() }\r\n                        { provided.placeholder }\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    UIState: state.UI,\r\n});\r\n\r\nconst InventoryCellsConnect = connect(\r\n    mapStateToProps,\r\n)(InventoryCells);\r\n\r\nexport {\r\n    InventoryCellsConnect as InventoryCells,\r\n}","import React from \"react\";\r\nimport { InventoryCells } from \"./InventoryCells\";\r\n\r\ntype Props = {\r\n    slots: number;\r\n} \r\n\r\nconst Inventory = (props: Props) => {\r\n    const { slots } = props;\r\n\r\n    return (\r\n        <div className=\"inventory\">\r\n            <div className=\"ui-top\">\r\n                Инвентарь ({ slots })\r\n            </div>\r\n            <div className=\"inventory-middle\">\r\n                <div className=\"inventory-clothes\">\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                    <div className=\"clothes-item\"></div>\r\n                </div>\r\n                <div className=\"inventory-body-items\">\r\n\r\n                    <div className=\"inventory-body-left\">\r\n                        <InventoryCells />\r\n                    </div>\r\n\r\n                    <div className=\"inventory-body-right\">\r\n                        inventory-body-right  \r\n                    </div>\r\n\r\n                </div>    \r\n            </div>            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport {\r\n    Inventory,\r\n}","import React from \"react\";\r\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { connect } from \"react-redux\";\r\nimport { State } from \"../../../../reducers\";\r\nimport { setInventoryItems } from \"../../../../actions/inventoryActions\";\r\nimport { UIState } from \"../../../../reducers/UIReducer\";\r\nimport { InventoryCell } from \"../../Inventory/InventoryCell\";\r\nimport { Item } from \"../../../../types\";\r\n\r\nconst shortString = '__groundCells';\r\n\r\ntype Props = {\r\n    setInventoryItems: (items: Item[]) => void;\r\n    UIState: UIState;\r\n}\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    overflow: 'auto',\r\n    height: '100%',\r\n});\r\n\r\nconst ItemsGroundCells = (props: Props) => {\r\n    const { UIState } = props;\r\n    const { ground } = UIState;\r\n    const { items } = ground;\r\n\r\n    return (\r\n        <Droppable droppableId=\"droppable\">\r\n        {(provided, snapshot) => (\r\n            <div { ...provided.droppableProps } ref={ provided.innerRef } style={ getListStyle(snapshot.isDraggingOver) }>\r\n                { items.map((item, idx) => <InventoryCell onSelectItem={ () => false } key={ `${shortString}${item.data.shortid}` } id={ idx } item={ item } />) }\r\n                { provided.placeholder }\r\n            </div>\r\n        )}\r\n        </Droppable>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    UIState: state.UI,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInventoryItems: (items: Item[]) => dispatch(setInventoryItems(items)),\r\n});\r\n\r\nconst ItemsGroundCellsConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(ItemsGroundCells);\r\n\r\nexport {\r\n    ItemsGroundCellsConnect as ItemsGroundCells,\r\n}","import React from \"react\";\r\nimport { InventoryCell } from \"../Inventory/InventoryCell\";\r\nimport { ItemsGroundCells } from \"./ItemsGroundCells\";\r\n\r\nconst ItemsGround = () => {\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"items-ground\">\r\n                <div className=\"ui-top\">items-ground-top</div>\r\n                <div className=\"items-ground-middle\">\r\n                    <ItemsGroundCells />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport {\r\n    ItemsGround,\r\n}","import rpc from 'rage-rpc';\r\n\r\ntype Result = {\r\n    result: boolean;\r\n    text: string;\r\n}\r\n\r\n// Подбор предмета с земли.\r\nasync function takeInventoryItemToServer(shortid: string, amount: number): Promise<Result> {\r\n    return rpc.callServer('server_take_inventory_item', JSON.stringify({ shortid, amount }))\r\n}\r\n\r\n// Дроп предмета с инв.\r\nasync function dropInventoryItemToServer(itemKey: string, amount: number) {\r\n    return rpc.callServer('server_drop_inventory_item', JSON.stringify({itemKey, amount}));\r\n}\r\n\r\nexport {\r\n    takeInventoryItemToServer,\r\n    dropInventoryItemToServer,\r\n}","import React from \"react\";\r\nimport './UserInterface.css';\r\nimport { Inventory } from \"./Inventory\";\r\nimport { ItemsGround } from \"./ItemsGround\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { State } from \"../../reducers\";\r\n\r\nimport { setInventoryItems, setGroundItems, addInventoryItem, setSnackbar, SnackbarType } from \"../../actions/inventoryActions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Item } from \"../../types\";\r\nimport { UIState } from \"../../reducers/UIReducer\";\r\nimport { takeInventoryItemToServer, dropInventoryItemToServer } from \"../../helpers/playerEvents/rpcCall\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination): any => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    console.log('result', result);\r\n\r\n    return result;\r\n};\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex): any => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\ntype Props = {\r\n    UIState: UIState;\r\n    setInventoryItems: (items: Item[]) => any; \r\n    setGroundItems: (items: Item[]) => any;\r\n    setSnackbar: (snack: SnackbarType) => any;\r\n}\r\n\r\nfunction UserInterface(props: Props) {\r\n    const { UIState, setInventoryItems, setGroundItems, setSnackbar } = props;\r\n    const { inventory, ground, snackbar } = UIState;\r\n    const { slots } = inventory;\r\n\r\n    const id2List = {\r\n        droppable: 'ground',\r\n        droppable1: 'inventory',\r\n    };\r\n\r\n    const getList = (id) => UIState[id2List[id]].items;\r\n\r\n    const onDragEnd = async (result) => {\r\n        const { source, destination } = result;\r\n\r\n        console.log('result', result);\r\n        console.log('source', source);\r\n        console.log('destination', destination);\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        // Если дроп. перенесен на текущий.\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            console.log('-> items', items);\r\n            console.log('-> source.droppableId', source.droppableId);\r\n            console.log('-> destination.index', destination.index);\r\n\r\n            if (source.droppableId === 'droppable') {\r\n                setGroundItems(items);\r\n            }\r\n            if (source.droppableId === 'droppable1') {\r\n                setInventoryItems(items);\r\n            }\r\n\r\n        } else { // Если дроп. перенесен с 1го на другой.\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination,\r\n            );\r\n\r\n            // Предмет выкинули\r\n            // ОТПРАВКА НА SERVER ITEM_KEY И AMOUNT ПРЕДМЕТА - для его удаления из инвентаря.\r\n            if (source.droppableId === 'droppable1') {\r\n                const inventoryItems = [...inventory.items];\r\n                const item = inventoryItems[source.index];\r\n                const serverResult = await dropInventoryItemToServer(item.key, item.amount);\r\n                if (serverResult.result) {\r\n                    setGroundItems(result.droppable);\r\n                    setInventoryItems(result.droppable1);\r\n                }\r\n\r\n                // setGroundItems(result.droppable);\r\n                // setInventoryItems(result.droppable1);\r\n                // console.log(' ===> Предмет выкинули.', item);\r\n            }\r\n\r\n            // Предмет положили\r\n            if (source.droppableId === 'droppable') {\r\n                const groundItems = [...ground.items];\r\n                const item = groundItems[source.index];\r\n                console.log(' ---> ПРЕДМЕТ ПОЛОЖИЛИ.', item);\r\n   \r\n                // Отправляем на сервак shortid предмета который перекладываем в инвентарь.\r\n                const serverResult = await takeInventoryItemToServer(item.data.shortid, item.amount);\r\n                if (serverResult.result) {\r\n                    setGroundItems(result.droppable);\r\n                    setInventoryItems(result.droppable1);\r\n                    setSnackbar({ open: true, text: serverResult.text, origin: { vertical: 'bottom', horizontal: 'center' } });\r\n                } else {\r\n                    setSnackbar({ open: true, text: serverResult.text, origin: { vertical: 'bottom', horizontal: 'center' } });\r\n                }\r\n\r\n                // console.log('result.droppable', result.droppable);\r\n                // console.log('result.droppable1', result.droppable1);\r\n                // console.log(' ===> Предмет положен.');\r\n\r\n                // setGroundItems(result.droppable);\r\n                // setInventoryItems(result.droppable1);\r\n                // setSnackbar({ open: true, text: 'serverResult.text', origin: { vertical: 'bottom', horizontal: 'center' } });\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='UI'> \r\n            <Snackbar\r\n                anchorOrigin={{ vertical: snackbar.origin.vertical, horizontal: snackbar.origin.horizontal }}\r\n                key={ `${snackbar.origin.vertical},${snackbar.origin.horizontal}` }\r\n                open={ snackbar.open }\r\n                message={ snackbar.text }\r\n                autoHideDuration={ 3000 }\r\n                // onClose={ () => setSnackbar({ open: false }) }\r\n            />\r\n            <div className=\"UI-container\">\r\n                <DragDropContext onDragEnd={ onDragEnd }>  \r\n                    <ItemsGround />\r\n                    <Inventory slots={ slots } />\r\n                </DragDropContext>\r\n            </div>\r\n        </div>\r\n    );    \r\n};\r\n\r\nconst mapStateToProps = (state: State) => ({\r\n    UIState: state.UI,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    setInventoryItems: (items: Item[]) => dispatch(setInventoryItems(items)),\r\n    setGroundItems: (items: Item[]) => dispatch(setGroundItems(items)),\r\n    setSnackbar: (snack) => dispatch(setSnackbar(snack)),\r\n});\r\n\r\nconst UserInterfaceConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n)(UserInterface);\r\n\r\nexport {\r\n    UserInterfaceConnect as UserInterface,\r\n}","import React from \"react\";\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport './styles.css';\nimport { UserInterface } from \"../UserInterface\";\nimport { emitter } from \"../../helpers/emitter\";\n\nfunction RoutesComp() {\n  return (\n    <div style={{position: 'absolute', top: 0, left: 0}}>\n      <div>\n        <ul>\n          <li><a href='#' onClick={ () => emitter.emit('goToHome') }>Главная</a></li>\n          <li><a href='#' onClick={ () => emitter.emit('goToUi') }>Equipment</a></li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nfunction Home({ history }) {\n  console.log('history');\n\n  return (\n    <div>Всем привет, я хоме.</div>\n  );\n}\n\nfunction App(props) {\n  // //// //// //// //// //// //// //// //// //// //// //// //// //// //// //\n  // УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ УДАЛИТЬ \n  // //// //// //// //// //// //// //// //// //// //// //// //// //// //// //\n  emitter.emit('goToUi')\n  // //// //// //// //// //// //// //// //// //// //// //// //// //// //// //\n\n  return (\n    <div className=\"app\">\n      <RoutesComp />\n      <Switch>\n        <Route exact path='/' component={ Home } />\n        <Route path='/ui' component={ UserInterface } />\n      </Switch>\n    </div>\n  );\n}\n\nexport {\n  App,\n};\n","import React from \"react\";\r\nimport { Provider } from 'react-redux';\r\nimport { store } from \"../../store/config\";\r\nimport { ConnectedRouter } from 'connected-react-router'\r\nimport { App } from \"../App\";\r\nimport { history } from '../../store/config';\r\n\r\nfunction Root() {\r\n    return (\r\n        <Provider store={ store }>\r\n            <ConnectedRouter history={ history }>\r\n                <App />\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport {\r\n    Root,\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'typeface-roboto';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Root } from './components/Root';\nimport { rpcRegister } from './helpers/playerEvents/rpcRegister';\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// Регистрация всех RPC события для RAGEMP\nrpcRegister();","import rpc from 'rage-rpc';\r\nimport { eventSetGroundItems, eventSetInventorySlots } from './events/eventSetGroundItems';\r\nimport { Item } from '../../types';\r\n\r\nconst rpcRegister = () => {\r\n    console.log(' ---> rpcRegister');\r\n\r\n    rpc.register('cef_set_ground_items', (data: Item[]) => {\r\n        console.log('ОН ДОШЕЛ ДО ЦЕФА. data', data);\r\n        console.log(JSON.stringify(data));\r\n        eventSetGroundItems(data);\r\n    });\r\n\r\n    rpc.register('cef_set_inventory_slots', (slots: number) => {\r\n        eventSetInventorySlots(slots);\r\n    });\r\n\r\n    // rpc.register('cef_add_inventory_item', (item) => {});\r\n};\r\n\r\nexport {\r\n    rpcRegister,\r\n}","import { Item } from \"../../../types\";\r\nimport { emitter } from \"../../emitter\";\r\n\r\nconst eventSetGroundItems = (items: Item[]) => {\r\n    emitter.emit('eventSetGroundItems', items);\r\n};\r\n\r\nconst eventSetInventorySlots = (slots: number) => {\r\n    emitter.emit('eventSetInventorySlots', slots);\r\n};\r\n\r\nexport {\r\n    eventSetGroundItems,\r\n    eventSetInventorySlots,\r\n}","module.exports = __webpack_public_path__ + \"static/media/item_weapon_ak47.4540b0aa.png\";","module.exports = __webpack_public_path__ + \"static/media/item_armor.54e93891.png\";","module.exports = __webpack_public_path__ + \"static/media/item_ammo_shotgun.ad78f4ac.png\";"],"sourceRoot":""}